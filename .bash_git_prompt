#!/usr/bin/env bash

reset="\001\e[m\002"
bold="\001\e[1m\002"

red="\001\e[1;31m\002"
white="\001\e[1;37m\002"
green="\001\e[1;32m\002"
blue="\001\e[1;34m\002"
yellow="\001\e[1;33m\002"
purple="\001\e[1;35m\002"
orange="\001\e[1;33m\002"

branch_status_color="${purple}"
stashed_color="${orange}"
conflict_color="${red}"
staged_color="${blue}"
modified_color="${red}"
clean_color="${green}"
untracked_color="${white}"

submodule_symbol="⊆"
stashed_symbol="${stashed_color}⚑"
conflict_symbol="${conflict_color}⨯"
staged_symbol="${staged_color}●"
modified_symbol="${modified_color}+"
clean_symbol="${clean_color}✓"
untracked_symbol="${untracked_color}…"

function get_superproject() {
  superproject=$(git rev-parse --show-superproject-working-tree)
  echo "${superproject}"
}

function has_remote_tracked() {
  branch="$1"
  remote="$(git config "branch.${branch}.remote")"
  [[ $? -eq 0 && $remote != '.' ]]
}

function get_distance_ahead_behind() {
  branch="$1"
  remote="$(git config --get "branch.${branch}.remote" || echo -n "origin")"
  remote_branch="${remote}/${branch}"
  echo "$(git rev-list --left-right --count ${branch}...${remote_branch} 2>/dev/null)"
}

function get_git_status() {
  git_dir=$1

  if [[ -f "${git_dir}/MERGE_HEAD" ]]; then
    state="|MERGING"
  elif [[ -f "${git_dir}/CHERRY_PICK_HEAD" ]]; then
    state="|CHERRY-PICKING"
  elif [[ -f "${git_dir}/REVERT_HEAD" ]]; then
    state="|REVERTING"
  elif [[ -f "${git_dir}/BISECT_LOG" ]]; then
    state="|BISECTING"
  fi

  [[ ! -z "${state:+x}" ]] && echo -en "${reset}|${state}"
}

function get_git_dir() {
  echo "$(git rev-parse --git-dir 2> /dev/null)"
}

function parse_status() {
  gitstatus="$(LC_ALL=C git status --porcelain --branch 2> /dev/null)"
  [[ -z "${gitstatus:+x}" ]] && exit 0

  num_staged=0
  num_changed=0
  num_conflicts=0
  num_untracked=0
  while IFS='' read -r line || [[ -n "${line}" ]]; do
    status="${line:0:2}"
    while [[ -n ${status} ]]; do
      case "${status}" in
        #two fixed character matches, loop finished
        \#\#) branch_line="${line/\.\.\./^}"; break ;;
        \?\?) ((num_untracked++)); break ;;
        U?) ((num_conflicts++)); break;;
        ?U) ((num_conflicts++)); break;;
        DD) ((num_conflicts++)); break;;
        AA) ((num_conflicts++)); break;;
        #two character matches, first loop
        ?M) ((num_changed++)) ;;
        ?D) ((num_changed++)) ;;
        ?\ ) ;;
        #single character matches, second loop
        U) ((num_conflicts++)) ;;
        \ ) ;;
        *) ((num_staged++)) ;;
      esac
      status="${status:0:(${#status}-1)}"
    done
  done <<< "${gitstatus}"

  num_stashed=0
  stash_file="${git_dir}/logs/refs/stash"
  if [[ -e "${stash_file}" ]]; then
    while IFS='' read -r wcline || [[ -n "${wcline}" ]]; do
      ((num_stashed++))
    done < "${stash_file}"
  fi

  clean=0
  if (( num_changed == 0 && num_staged == 0 && num_untracked == 0 && num_stashed == 0 && num_conflicts == 0)) ; then
    clean=1
  fi

  IFS="^" read -ra branch_fields <<< "${branch_line/\#\# }"
  branch="${branch_fields[0]}"
  if [[ "${#branch_fields[@]}" -eq 1 ]]; then
    remote="."
  else
    IFS="[,]" read -ra remote_fields <<< "${branch_fields[1]}"
    upstream="${remote_fields[0]}"
  fi

  has_remote_tracked="$(has_remote_tracked "${branch}"; echo $?)"
  read branch_ahead branch_behind <<< "$(get_distance_ahead_behind "${branch}")"

  echo -n "${purple}${branch}${reset}"

  if [[ ! -z ${branch_behind+x} && $branch_behind -gt 0 ]]; then
    echo -n " 🠇·${branch_behind}"
  fi

  if [[ ! -z ${branch_ahead+x} && $branch_ahead -gt 0 ]]; then
    echo -n " 🠅·${branch_ahead}"
  fi
  
  if [[ $remote == "." ]]; then
    echo -n ":L"
  elif [[ $has_remote_tracked -ne 0 ]]; then
    echo -n ":U"
  fi

  if [[ $num_stashed -gt 0 ]]; then
    status="${status}${stashed_symbol}${num_stashed}"
  fi

  if [[ $num_conflicts -gt 0 ]]; then
    status="${status}${conflict_symbol}${num_conflicts}"
  fi

  if [[ $num_staged -gt 0 ]]; then
    status="${status}${staged_symbol}${num_staged}"
  fi

  if [[ $num_changed -gt 0 ]]; then
    status="${status}${modified_symbol}${num_changed}"
  fi

  if [[ $num_untracked -gt 0 ]]; then
    status="${status}${untracked_symbol}${num_untracked}"
  fi

  if [[ $clean -gt 0 ]]; then
    status="${clean_symbol}"
  fi

  echo -n "${reset}|${status}"
}

function print_bare() {
	bare_state=$(git symbolic-ref HEAD)
	echo -en "[__BARE__:${bare_state#refs/heads/}] "
}

function print_git_prompt() {
  git_dir="$(get_git_dir)"
  [[ -z "${git_dir:+x}" ]] && exit 0

  gitstatus=$(git status 2>/dev/null)
  if [[ ! "${?}" ]] || [[ -z "${gitstatus:+x}" ]]; then
	  print_bare
	  exit 0
  fi

  if [[ ! -z $GIT_PROMPT_SHOW_ADDITIONAL ]]; then
    superproject="$(get_superproject)"
    remote_url=$(git config --get remote.origin.url | sed 's|^.*//||; s/.*@//; s/[^:/]\+[:/]//; s/.git$//')
  fi

  # Echo our output

  echo -en "${reset}["
  echo -en "$(parse_status)"
  echo -en "$(get_git_status "$git_dir")"
  echo -en "${reset}] "
}
